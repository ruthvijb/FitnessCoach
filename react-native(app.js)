import React, { useEffect, useRef, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { Camera } from 'react-native-vision-camera';
import * as tf from '@tensorflow/tfjs';
import * as posedetection from '@tensorflow-models/pose-detection';

export default function FitnessApp() {
  const cameraRef = useRef(null);
  const [hasPermission, setHasPermission] = useState(null);
  const [reps, setReps] = useState(0);
  const [detector, setDetector] = useState(null);

  useEffect(() => {
    async function setupCamera() {
      const permission = await Camera.requestCameraPermission();
      setHasPermission(permission === 'authorized');
    }
    async function loadModel() {
      await tf.ready();
      const detector = await posedetection.createDetector(posedetection.SupportedModels.MoveNet);
      setDetector(detector);
    }
    setupCamera();
    loadModel();
  }, []);

  async function detectPose(image) {
    if (!detector) return;
    const poses = await detector.estimatePoses(image);
    if (poses.length > 0) {
      // Implement a basic rep counting logic
      const keypoints = poses[0].keypoints;
      const knee = keypoints.find((point) => point.name === 'left_knee' || point.name === 'right_knee');
      if (knee && knee.y < 300) { // Example threshold
        setReps((prevReps) => prevReps + 1);
      }
    }
  }

  return (
    <View style={styles.container}>
      {hasPermission ? (
        <Camera
          ref={cameraRef}
          style={styles.camera}
          isActive={true}
          onFrame={(frame) => detectPose(frame)}
        />
      ) : (
        <Text>No camera access</Text>
      )}
      <Text style={styles.repCounter}>Reps: {reps}</Text>
      <TouchableOpacity style={styles.button} onPress={() => setReps(0)}>
        <Text style={styles.buttonText}>Reset</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  camera: {
    width: '100%',
    height: '70%',
  },
  repCounter: {
    fontSize: 24,
    fontWeight: 'bold',
    margin: 20,
    color: '#333',
  },
  button: {
    backgroundColor: '#ff6347',
    padding: 15,
    borderRadius: 10,
    marginTop: 10,
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});
